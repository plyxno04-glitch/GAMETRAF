(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))i(a);new MutationObserver(a=>{for(const n of a)if(n.type==="childList")for(const h of n.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&i(h)}).observe(document,{childList:!0,subtree:!0});function e(a){const n={};return a.integrity&&(n.integrity=a.integrity),a.referrerPolicy&&(n.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?n.credentials="include":a.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(a){if(a.ep)return;a.ep=!0;const n=e(a);fetch(a.href,n)}})();const s={CANVAS_WIDTH:1200,CANVAS_HEIGHT:1200,INTERSECTION_SIZE:120,ROAD_WIDTH:60,LANE_WIDTH:30,CAR_WIDTH:16,CAR_HEIGHT:8,CAR_COLORS:["#FF0000","#00FF00","#0000FF","#FFFF00","#FFA500","#FFFFFF","#000000","#888888"],DIRECTIONS:{NORTH:"north",SOUTH:"south",EAST:"east",WEST:"west"},TURN_TYPES:{STRAIGHT:"straight"},MODES:{FIXED:"fixed",ADAPTIVE:"adaptive"},LIGHT_SIZE:12,LIGHT_STATES:{RED:"red",YELLOW:"yellow",GREEN:"green"},DEFAULT_SETTINGS:{GREEN_DURATION:1e5,YELLOW_DURATION:5e3,RED_DURATION:1e5,CAR_SPAWN_RATE:4,CAR_SPEED:25,TURN_RATE:.25,DETECTOR_DISTANCE:200,MIN_GREEN_TIME:5e3},ADAPTIVE_SETTINGS:{DETECTOR_DISTANCE_RANGE:[100,1e3]}};class p{constructor(t,e){this.centerX=t,this.centerY=e,this.size=s.INTERSECTION_SIZE,this.roadWidth=s.ROAD_WIDTH,this.laneWidth=s.LANE_WIDTH,this.calculatePositions()}initialize(){this.calculatePositions()}calculatePositions(){const t=this.size/2,e=this.roadWidth/2,i=this.laneWidth/2,a=t+5;this.stopLines={[s.DIRECTIONS.NORTH]:{x1:this.centerX-e,y1:this.centerY-a,x2:this.centerX+e,y2:this.centerY-a},[s.DIRECTIONS.EAST]:{x1:this.centerX+a,y1:this.centerY-e,x2:this.centerX+a,y2:this.centerY+e},[s.DIRECTIONS.SOUTH]:{x1:this.centerX-e,y1:this.centerY+a,x2:this.centerX+e,y2:this.centerY+a},[s.DIRECTIONS.WEST]:{x1:this.centerX-a,y1:this.centerY-e,x2:this.centerX-a,y2:this.centerY+e}},this.lightPositions={[s.DIRECTIONS.NORTH]:{x:this.centerX-25,y:this.centerY-t-40},[s.DIRECTIONS.EAST]:{x:this.centerX+t+15,y:this.centerY-25},[s.DIRECTIONS.SOUTH]:{x:this.centerX+25,y:this.centerY+t+15},[s.DIRECTIONS.WEST]:{x:this.centerX-t-40,y:this.centerY+25}},this.spawnPoints={[s.DIRECTIONS.NORTH]:{x:this.centerX-i,y:0},[s.DIRECTIONS.EAST]:{x:s.CANVAS_WIDTH,y:this.centerY-i},[s.DIRECTIONS.SOUTH]:{x:this.centerX+i,y:s.CANVAS_HEIGHT},[s.DIRECTIONS.WEST]:{x:0,y:this.centerY+i}},this.exitPoints={[s.DIRECTIONS.NORTH]:{x:this.centerX+i,y:0},[s.DIRECTIONS.EAST]:{x:s.CANVAS_WIDTH,y:this.centerY+i},[s.DIRECTIONS.SOUTH]:{x:this.centerX-i,y:s.CANVAS_HEIGHT},[s.DIRECTIONS.WEST]:{x:0,y:this.centerY-i}}}render(t){this.drawRoads(t),this.drawIntersection(t),this.drawLaneMarkings(t),this.drawStopLines(t)}drawRoads(t){const e=this.roadWidth/2;t.fillStyle="#444444",t.fillRect(this.centerX-e,0,this.roadWidth,s.CANVAS_HEIGHT),t.fillRect(0,this.centerY-e,s.CANVAS_WIDTH,this.roadWidth)}drawIntersection(t){const e=this.roadWidth/2,i=e;t.fillStyle="#666666",t.beginPath(),t.moveTo(this.centerX-e,this.centerY-e-i),t.quadraticCurveTo(this.centerX-e,this.centerY-e,this.centerX-e-i,this.centerY-e),t.lineTo(this.centerX-e-i,this.centerY+e),t.quadraticCurveTo(this.centerX-e,this.centerY+e,this.centerX-e,this.centerY+e+i),t.lineTo(this.centerX+e,this.centerY+e+i),t.quadraticCurveTo(this.centerX+e,this.centerY+e,this.centerX+e+i,this.centerY+e),t.lineTo(this.centerX+e+i,this.centerY-e),t.quadraticCurveTo(this.centerX+e,this.centerY-e,this.centerX+e,this.centerY-e-i),t.closePath(),t.fill(),t.globalCompositeOperation="source-over"}drawLaneMarkings(t){t.strokeStyle="#ffffff",t.lineWidth=2,t.setLineDash([10,10]);const e=this.roadWidth/2;t.beginPath(),t.moveTo(this.centerX,0),t.lineTo(this.centerX,this.centerY-e),t.moveTo(this.centerX,this.centerY+e),t.lineTo(this.centerX,s.CANVAS_HEIGHT),t.stroke(),t.beginPath(),t.moveTo(0,this.centerY),t.lineTo(this.centerX-e,this.centerY),t.moveTo(this.centerX+e,this.centerY),t.lineTo(s.CANVAS_WIDTH,this.centerY),t.stroke(),t.setLineDash([])}drawStopLines(t){t.strokeStyle="#ffffff",t.lineWidth=4,Object.values(this.stopLines).forEach(e=>{t.beginPath(),t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.stroke()})}getStopLinePosition(t){return this.stopLines[t]}getSpawnPoint(t){switch(t){case"north":return{x:this.centerX,y:this.centerY-300};case"south":return{x:this.centerX,y:this.centerY+300};case"east":return{x:this.centerX+300,y:this.centerY};case"west":return{x:this.centerX-300,y:this.centerY};default:return}}getExitPoint(t){switch(t){case"north":return{x:this.centerX,y:this.centerY-300};case"south":return{x:this.centerX,y:this.centerY+300};case"east":return{x:this.centerX+300,y:this.centerY};case"west":return{x:this.centerX-300,y:this.centerY};default:return}}getLightPosition(t){if(!t||typeof t!="string"){console.warn("Invalid direction for getLightPosition:",t);return}return this.lightPositions[t]}isInIntersection(t,e){const i=this.roadWidth/2;return t>=this.centerX-i&&t<=this.centerX+i&&e>=this.centerY-i&&e<=this.centerY+i}getProperExitPoint(t,e,i){return this.laneWidth/2,this.exitPoints[e]}getTurningPath(t,e,i){return[this.getPathEntryPoint(t),this.exitPoints[e]]}getPathEntryPoint(t){const e=this.roadWidth/2,i=this.laneWidth/2;switch(t){case s.DIRECTIONS.NORTH:return{x:this.centerX-i,y:this.centerY-e};case s.DIRECTIONS.EAST:return{x:this.centerX+e,y:this.centerY-i};case s.DIRECTIONS.SOUTH:return{x:this.centerX+i,y:this.centerY+e};case s.DIRECTIONS.WEST:return{x:this.centerX-e,y:this.centerY+i}}}setCarManager(t){this.carManager=t}getAllCars(){return this.carManager?this.carManager.getCars():[]}}class S{constructor(){this.lights={},this.mode=s.MODES.FIXED,this.settings={...s.DEFAULT_SETTINGS},this.fixedState={currentPhase:0,phaseTimer:0,isActive:!1},this.adaptiveState={currentPair:null,currentPhase:"red",phaseTimer:0,isActive:!1,priorityScores:{WE:0,NS:0},lastSwitchTime:0,firstCarTriggered:!1},this.initializeLights()}initializeLights(){Object.values(s.DIRECTIONS).forEach(t=>{this.lights[t]={state:s.LIGHT_STATES.RED,timer:0}})}initialize(t,e){this.mode=t,this.settings={...e},t===s.MODES.FIXED&&!this.fixedState.isActive?this.initializeFixedMode():t===s.MODES.ADAPTIVE&&!this.adaptiveState.isActive&&this.initializeAdaptiveMode()}initializeFixedMode(){console.log("Initializing Fixed Mode"),this.fixedState={currentPhase:0,phaseTimer:0,isActive:!0},this.setFixedLightState()}initializeAdaptiveMode(){console.log("Initializing Adaptive Mode"),this.adaptiveState={currentPair:null,currentPhase:"red",phaseTimer:0,isActive:!0,priorityScores:{WE:0,NS:0},lastSwitchTime:0,firstCarTriggered:!1},this.setAllLightsRed()}update(t,e,i){this.mode=e,this.settings={...i},e===s.MODES.FIXED?(this.fixedState.isActive||this.initializeFixedMode(),this.updateFixedMode(t)):e===s.MODES.ADAPTIVE&&(this.adaptiveState.isActive||this.initializeAdaptiveMode(),this.updateAdaptiveMode(t))}updateFixedMode(t){switch(this.fixedState.phaseTimer+=t,this.fixedState.currentPhase){case 0:this.fixedState.phaseTimer>=this.settings.GREEN_DURATION&&this.advanceFixedPhase();break;case 1:this.fixedState.phaseTimer>=this.settings.YELLOW_DURATION&&this.advanceFixedPhase();break;case 2:this.fixedState.phaseTimer>=this.settings.RED_DURATION&&this.advanceFixedPhase();break;case 3:this.fixedState.phaseTimer>=this.settings.GREEN_DURATION&&this.advanceFixedPhase();break;case 4:this.fixedState.phaseTimer>=this.settings.YELLOW_DURATION&&this.advanceFixedPhase();break;case 5:this.fixedState.phaseTimer>=this.settings.RED_DURATION&&this.advanceFixedPhase();break}}advanceFixedPhase(){this.fixedState.currentPhase=(this.fixedState.currentPhase+1)%6,this.fixedState.phaseTimer=0,this.setFixedLightState(),console.log(`Fixed Mode: Advanced to phase ${this.fixedState.currentPhase}`)}setFixedLightState(){switch(this.setAllLightsRed(),this.fixedState.currentPhase){case 0:this.lights[s.DIRECTIONS.WEST].state=s.LIGHT_STATES.GREEN,this.lights[s.DIRECTIONS.EAST].state=s.LIGHT_STATES.GREEN;break;case 1:this.lights[s.DIRECTIONS.WEST].state=s.LIGHT_STATES.YELLOW,this.lights[s.DIRECTIONS.EAST].state=s.LIGHT_STATES.YELLOW;break;case 2:break;case 3:this.lights[s.DIRECTIONS.NORTH].state=s.LIGHT_STATES.GREEN,this.lights[s.DIRECTIONS.SOUTH].state=s.LIGHT_STATES.GREEN;break;case 4:this.lights[s.DIRECTIONS.NORTH].state=s.LIGHT_STATES.YELLOW,this.lights[s.DIRECTIONS.SOUTH].state=s.LIGHT_STATES.YELLOW;break}}updateAdaptiveMode(t){if(this.adaptiveState.phaseTimer+=t,this.adaptiveState.currentPair===null){const e=this.getHighestPriorityPair();e&&this.adaptiveState.priorityScores[e]>0&&(console.log(`Adaptive Mode: First car detected, switching to ${e}`),this.switchToAdaptivePair(e));return}switch(this.adaptiveState.currentPhase){case"green":this.shouldSwitchInAdaptive()&&(console.log("Adaptive Mode: Switching due to higher priority"),this.startAdaptiveYellow());break;case"yellow":this.adaptiveState.phaseTimer>=this.settings.YELLOW_DURATION&&this.startAdaptiveRed();break;case"red":if(this.adaptiveState.phaseTimer>=2e3){const i=this.getHighestPriorityPair();i&&i!==this.adaptiveState.currentPair?this.switchToAdaptivePair(i):i===this.adaptiveState.currentPair&&this.startAdaptiveGreen()}break}}switchToAdaptivePair(t){this.adaptiveState.currentPair=t,this.startAdaptiveGreen()}startAdaptiveGreen(){this.adaptiveState.currentPhase="green",this.adaptiveState.phaseTimer=0,this.setAdaptiveLightState(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned GREEN`)}startAdaptiveYellow(){this.adaptiveState.currentPhase="yellow",this.adaptiveState.phaseTimer=0,this.setAdaptiveLightState(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned YELLOW`)}startAdaptiveRed(){this.adaptiveState.currentPhase="red",this.adaptiveState.phaseTimer=0,this.adaptiveState.lastSwitchTime=Date.now(),this.setAllLightsRed(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned RED`)}setAdaptiveLightState(){if(this.setAllLightsRed(),this.adaptiveState.current
