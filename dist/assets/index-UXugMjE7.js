(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))i(a);new MutationObserver(a=>{for(const n of a)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function e(a){const n={};return a.integrity&&(n.integrity=a.integrity),a.referrerPolicy&&(n.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?n.credentials="include":a.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(a){if(a.ep)return;a.ep=!0;const n=e(a);fetch(a.href,n)}})();const s={CANVAS_WIDTH:1200,CANVAS_HEIGHT:1200,INTERSECTION_SIZE:120,ROAD_WIDTH:60,LANE_WIDTH:30,CAR_WIDTH:16,CAR_HEIGHT:8,CAR_COLORS:["#FF0000","#00FF00","#0000FF","#FFFF00","#FFA500","#FFFFFF","#000000","#888888"],DIRECTIONS:{NORTH:"north",SOUTH:"south",EAST:"east",WEST:"west"},TURN_TYPES:{STRAIGHT:"straight"},MODES:{FIXED:"fixed",ADAPTIVE:"adaptive"},LIGHT_SIZE:12,LIGHT_STATES:{RED:"red",YELLOW:"yellow",GREEN:"green"},DEFAULT_SETTINGS:{GREEN_DURATION:1e5,YELLOW_DURATION:5e3,RED_DURATION:1e5,CAR_SPAWN_RATE:4,CAR_SPEED:25,TURN_RATE:.25,DETECTOR_DISTANCE:500,MIN_GREEN_TIME:5e3},ADAPTIVE_SETTINGS:{DETECTOR_DISTANCE_RANGE:[100,500]}};class f{getPathEntryPoint(t){const e=this.roadWidth/2,i=this.laneWidth/2;switch(t){case s.DIRECTIONS.NORTH:return{x:this.centerX-i,y:this.centerY-e};case s.DIRECTIONS.EAST:return{x:this.centerX+e,y:this.centerY-i};case s.DIRECTIONS.SOUTH:return{x:this.centerX+i,y:this.centerY+e};case s.DIRECTIONS.WEST:return{x:this.centerX-e,y:this.centerY+i};default:return{x:this.centerX,y:this.centerY}}}constructor(t,e){this.centerX=t,this.centerY=e,this.size=s.INTERSECTION_SIZE,this.roadWidth=s.ROAD_WIDTH,this.laneWidth=s.LANE_WIDTH,this.calculatePositions()}initialize(){this.calculatePositions()}calculatePositions(){const t=this.size/2,e=this.roadWidth/2,i=this.laneWidth/2,a=t+5;this.stopLines={[s.DIRECTIONS.NORTH]:{x1:this.centerX-e,y1:this.centerY-a,x2:this.centerX+e,y2:this.centerY-a},[s.DIRECTIONS.EAST]:{x1:this.centerX+a,y1:this.centerY-e,x2:this.centerX+a,y2:this.centerY+e},[s.DIRECTIONS.SOUTH]:{x1:this.centerX-e,y1:this.centerY+a,x2:this.centerX+e,y2:this.centerY+a},[s.DIRECTIONS.WEST]:{x1:this.centerX-a,y1:this.centerY-e,x2:this.centerX-a,y2:this.centerY+e}},this.lightPositions={[s.DIRECTIONS.NORTH]:{x:this.centerX-25,y:this.centerY-t-40},[s.DIRECTIONS.EAST]:{x:this.centerX+t+15,y:this.centerY-25},[s.DIRECTIONS.SOUTH]:{x:this.centerX+25,y:this.centerY+t+15},[s.DIRECTIONS.WEST]:{x:this.centerX-t-40,y:this.centerY+25}},this.spawnPoints={[s.DIRECTIONS.NORTH]:{x:this.centerX-i,y:0},[s.DIRECTIONS.EAST]:{x:s.CANVAS_WIDTH,y:this.centerY-i},[s.DIRECTIONS.SOUTH]:{x:this.centerX+i,y:s.CANVAS_HEIGHT},[s.DIRECTIONS.WEST]:{x:0,y:this.centerY+i}},this.exitPoints={[s.DIRECTIONS.NORTH]:{x:this.centerX+i,y:0},[s.DIRECTIONS.EAST]:{x:s.CANVAS_WIDTH,y:this.centerY+i},[s.DIRECTIONS.SOUTH]:{x:this.centerX-i,y:s.CANVAS_HEIGHT},[s.DIRECTIONS.WEST]:{x:0,y:this.centerY-i}}}render(t){this.drawRoads(t),this.drawIntersection(t),this.drawLaneMarkings(t),this.drawStopLines(t)}drawRoads(t){const e=this.roadWidth/2;t.fillStyle="#444444",t.fillRect(this.centerX-e,0,this.roadWidth,s.CANVAS_HEIGHT),t.fillRect(0,this.centerY-e,s.CANVAS_WIDTH,this.roadWidth)}drawIntersection(t){const e=this.roadWidth/2,i=e;t.fillStyle="#666666",t.beginPath(),t.moveTo(this.centerX-e,this.centerY-e-i),t.quadraticCurveTo(this.centerX-e,this.centerY-e,this.centerX-e-i,this.centerY-e),t.lineTo(this.centerX-e-i,this.centerY+e),t.quadraticCurveTo(this.centerX-e,this.centerY+e,this.centerX-e,this.centerY+e+i),t.lineTo(this.centerX+e,this.centerY+e+i),t.quadraticCurveTo(this.centerX+e,this.centerY+e,this.centerX+e+i,this.centerY+e),t.lineTo(this.centerX+e+i,this.centerY-e),t.quadraticCurveTo(this.centerX+e,this.centerY-e,this.centerX+e,this.centerY-e-i),t.closePath(),t.fill(),t.globalCompositeOperation="source-over"}drawLaneMarkings(t){t.strokeStyle="#ffffff",t.lineWidth=2,t.setLineDash([10,10]);const e=this.roadWidth/2;t.beginPath(),t.moveTo(this.centerX,0),t.lineTo(this.centerX,this.centerY-e),t.moveTo(this.centerX,this.centerY+e),t.lineTo(this.centerX,s.CANVAS_HEIGHT),t.stroke(),t.beginPath(),t.moveTo(0,this.centerY),t.lineTo(this.centerX-e,this.centerY),t.moveTo(this.centerX+e,this.centerY),t.lineTo(s.CANVAS_WIDTH,this.centerY),t.stroke(),t.setLineDash([])}drawStopLines(t){t.strokeStyle="#ffffff",t.lineWidth=4,Object.values(this.stopLines).forEach(e=>{t.beginPath(),t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.stroke()})}getStopLinePosition(t){return this.stopLines[t]}getSpawnPoint(t){switch(t){case"north":return{x:this.centerX,y:this.centerY-300};case"south":return{x:this.centerX,y:this.centerY+300};case"east":return{x:this.centerX+300,y:this.centerY};case"west":return{x:this.centerX-300,y:this.centerY};default:return}}getExitPoint(t){switch(t){case"north":return{x:this.centerX,y:this.centerY-300};case"south":return{x:this.centerX,y:this.centerY+300};case"east":return{x:this.centerX+300,y:this.centerY};case"west":return{x:this.centerX-300,y:this.centerY};default:return}}getLightPosition(t){if(!t||typeof t!="string"){console.warn("Invalid direction for getLightPosition:",t);return}return this.lightPositions[t]}isInIntersection(t,e){const i=this.roadWidth/2;return t>=this.centerX-i&&t<=this.centerX+i&&e>=this.centerY-i&&e<=this.centerY+i}getProperExitPoint(t,e,i){return this.laneWidth/2,this.exitPoints[e]}getTurningPath(t,e,i){return[this.getPathEntryPoint(t),this.exitPoints[e]]}getPathEntryPoint(t){const e=this.roadWidth/2,i=this.laneWidth/2;switch(t){case s.DIRECTIONS.NORTH:return{x:this.centerX-i,y:this.centerY-e};case s.DIRECTIONS.EAST:return{x:this.centerX+e,y:this.centerY-i};case s.DIRECTIONS.SOUTH:return{x:this.centerX+i,y:this.centerY+e};case s.DIRECTIONS.WEST:return{x:this.centerX-e,y:this.centerY+i}}}setCarManager(t){this.carManager=t}getAllCars(){return this.carManager?this.carManager.getCars():[]}}class T{initialize(t,e){this.mode=t,this.settings={...e},t===s.MODES.FIXED?this.initializeFixedMode():t===s.MODES.ADAPTIVE&&this.initializeAdaptiveMode()}constructor(){this.lights={},this.mode=s.MODES.FIXED,this.settings={...s.DEFAULT_SETTINGS},this.fixedState={currentPhase:0,phaseTimer:0,isActive:!1},this.adaptiveState={currentPair:null,currentPhase:"red",phaseTimer:0,isActive:!1,priorityScores:{WE:0,NS:0},lastSwitchTime:0,firstCarTriggered:!1},this.initializeLights()}initializeLights(){Object.values(s.DIRECTIONS).forEach(t=>{this.lights[t]={state:s.LIGHT_STATES.RED,timer:0}})}initializeFixedMode(){console.log("Initializing Fixed Mode"),this.fixedState={currentPhase:0,phaseTimer:0,isActive:!0},this.setFixedLightState()}initializeAdaptiveMode(){console.log("Initializing Adaptive Mode"),this.adaptiveState={currentPair:null,currentPhase:"red",phaseTimer:0,isActive:!0,priorityScores:{WE:0,NS:0},lastSwitchTime:0,firstCarTriggered:!1},this.setAllLightsRed()}update(t,e,i){this.mode=e,this.settings={...i},e===s.MODES.FIXED?(this.fixedState.isActive||this.initializeFixedMode(),this.updateFixedMode(t)):e===s.MODES.ADAPTIVE&&(this.adaptiveState.isActive||this.initializeAdaptiveMode(),this.updateAdaptiveMode(t))}updateFixedMode(t){switch(this.fixedState.phaseTimer+=t,this.fixedState.currentPhase){case 0:this.fixedState.phaseTimer>=this.settings.GREEN_DURATION&&this.advanceFixedPhase();break;case 1:this.fixedState.phaseTimer>=this.settings.YELLOW_DURATION&&this.advanceFixedPhase();break;case 2:this.fixedState.phaseTimer>=3e3&&this.advanceFixedPhase();break;case 3:this.fixedState.phaseTimer>=this.settings.GREEN_DURATION&&this.advanceFixedPhase();break;case 4:this.fixedState.phaseTimer>=this.settings.YELLOW_DURATION&&this.advanceFixedPhase();break;case 5:this.fixedState.phaseTimer>=3e3&&this.advanceFixedPhase();break}}advanceFixedPhase(){this.fixedState.currentPhase=(this.fixedState.currentPhase+1)%6,this.fixedState.phaseTimer=0,this.setFixedLightState(),console.log(`Fixed Mode: Advanced to phase ${this.fixedState.currentPhase}`)}setFixedLightState(){switch(this.setAllLightsRed(),this.fixedState.currentPhase){case 0:this.lights[s.DIRECTIONS.NORTH].state=s.LIGHT_STATES.GREEN,this.lights[s.DIRECTIONS.SOUTH].state=s.LIGHT_STATES.GREEN;break;case 1:this.lights[s.DIRECTIONS.NORTH].state=s.LIGHT_STATES.YELLOW,this.lights[s.DIRECTIONS.SOUTH].state=s.LIGHT_STATES.YELLOW;break;case 2:break;case 3:this.lights[s.DIRECTIONS.WEST].state=s.LIGHT_STATES.GREEN,this.lights[s.DIRECTIONS.EAST].state=s.LIGHT_STATES.GREEN;break;case 4:this.lights[s.DIRECTIONS.WEST].state=s.LIGHT_STATES.YELLOW,this.lights[s.DIRECTIONS.EAST].state=s.LIGHT_STATES.YELLOW;break}}updateAdaptiveMode(t){if(this.adaptiveState.phaseTimer+=t,this.adaptiveState.currentPair===null){const e=this.getHighestPriorityPair();e&&this.adaptiveState.priorityScores[e]>0&&(console.log(`Adaptive Mode: First car detected, switching to ${e}`),this.switchToAdaptivePair(e));return}switch(this.adaptiveState.currentPhase){case"green":this.shouldSwitchInAdaptive()&&(console.log("Adaptive Mode: Switching due to higher priority"),this.startAdaptiveYellow());break;case"yellow":this.adaptiveState.phaseTimer>=this.settings.YELLOW_DURATION&&this.startAdaptiveRed();break;case"red":if(this.adaptiveState.phaseTimer>=2e3){const i=this.getHighestPriorityPair();i&&i!==this.adaptiveState.currentPair?this.switchToAdaptivePair(i):i===this.adaptiveState.currentPair&&this.startAdaptiveGreen()}break}}switchToAdaptivePair(t){this.adaptiveState.currentPair=t,this.startAdaptiveGreen()}startAdaptiveGreen(){this.adaptiveState.currentPhase="green",this.adaptiveState.phaseTimer=0,this.setAdaptiveLightState(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned GREEN`)}startAdaptiveYellow(){this.adaptiveState.currentPhase="yellow",this.adaptiveState.phaseTimer=0,this.setAdaptiveLightState(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned YELLOW`)}startAdaptiveRed(){this.adaptiveState.currentPhase="red",this.adaptiveState.phaseTimer=0,this.adaptiveState.lastSwitchTime=Date.now(),this.setAllLightsRed(),console.log(`Adaptive Mode: ${this.adaptiveState.currentPair} lights turned RED`)}setAdaptiveLightState(){if(this.setAllLightsRed(),this.adaptiveState.currentPair==="WE"){const t=this.adaptiveState.currentPhase==="green"?s.LIGHT_STATES.GREEN:this.adaptiveState.currentPhase==="yellow"?s.LIGHT_STATES.YELLOW:s.LIGHT_STATES.RED;this.lights[s.DIRECTIONS.WEST].state=t,this.lights[s.DIRECTIONS.EAST].state=t}else if(this.adaptiveState.currentPair==="NS"){const t=this.adaptiveState.currentPhase==="green"?s.LIGHT_STATES.GREEN:this.adaptiveState.currentPhase==="yellow"?s.LIGHT_STATES.YELLOW:s.LIGHT_STATES.RED;this.lights[s.DIRECTIONS.NORTH].state=t,this.lights[s.DIRECTIONS.SOUTH].state=t}}shouldSwitchInAdaptive(){const t=this.adaptiveState.currentPair,e=t==="WE"?"NS":"WE",i=this.adaptiveState.priorityScores[t]||0,a=this.adaptiveState.priorityScores[e]||0;return a>i*1.5&&a>10}getHighestPriorityPair(){const t=this.adaptiveState.priorityScores.WE||0,e=this.adaptiveState.priorityScores.NS||0;return t>e&&t>0?"WE":e>t&&e>0?"NS":null}updateAdaptiveLogic(t,e){if(this.mode!==s.MODES.ADAPTIVE||!this.adaptiveState.isActive)return;const i=this.adaptiveState.currentPhase;this.lastPhase&&this.lastPhase!==i&&console.log(`Adaptive Mode: Phase changed from ${this.lastPhase} to ${i}, car counts will reset`),this.lastPhase=i;const a=this.calculatePairScore("WE",t),n=this.calculatePairScore("NS",t);this.adaptiveState.priorityScores={WE:a,NS:n}}calculatePairScore(t,e){let i=0;if(t==="WE"){const a=e[s.DIRECTIONS.WEST]||{carsWaiting:0,waitTime:0,totalCarsDetected:0},n=e[s.DIRECTIONS.EAST]||{carsWaiting:0,waitTime:0,totalCarsDetected:0};i=a.carsWaiting*(a.waitTime/1e3)+n.carsWaiting*(n.waitTime/1e3)+a.totalCarsDetected+n.totalCarsDetected}else if(t==="NS"){const a=e[s.DIRECTIONS.NORTH]||{carsWaiting:0,waitTime:0,totalCarsDetected:0},n=e[s.DIRECTIONS.SOUTH]||{carsWaiting:0,waitTime:0,totalCarsDetected:0};i=a.carsWaiting*(a.waitTime/1e3)+n.carsWaiting*(n.waitTime/1e3)+a.totalCarsDetected+n.totalCarsDetected}return i}setAllLightsRed(){Object.values(s.DIRECTIONS).forEach(t=>{this.lights[t].state=s.LIGHT_STATES.RED})}render(t,e){["north","south","east","west"].forEach(a=>{const n=this.lights[s.DIRECTIONS[a.toUpperCase()]].state;this.renderTrafficLight(t,a,n,e)})}renderTrafficLight(t,e,i,a){const n=a.getLightPosition(e);if(!n)return;const r=s.LIGHT_SIZE,o=r+2;t.fillStyle="#333",t.fillRect(n.x-r-1,n.y-o*1.5-1,(r+1)*2,o*3+2),["red","yellow","green"].forEach((c,d)=>{const u=n.y-o+d*o;t.fillStyle="#222",t.beginPath(),t.arc(n.x,u,r,0,Math.PI*2),t.fill(),i===c&&(t.fillStyle=c,t.beginPath(),t.arc(n.x,u,r-2,0,Math.PI*2),t.fill())})}getLightStates(){const t={};return Object.entries(this.lights).forEach(([e,i])=>{t[e]=i.state}),t}setMode(t){this.mode=t,t===s.MODES.FIXED&&!this.fixedState.isActive?this.initializeFixedMode():t===s.MODES.ADAPTIVE&&!this.adaptiveState.isActive&&this.initializeAdaptiveMode()}updateSettings(t){this.settings={...t}}reset(){this.mode===s.MODES.FIXED?(this.fixedState.isActive=!1,this.initializeFixedMode()):this.mode===s.MODES.ADAPTIVE&&(this.adaptiveState.isActive=!1,this.initializeAdaptiveMode()),console.log(`${this.mode} mode reset`)}getDebugInfo(){return this.mode===s.MODES.FIXED?{mode:"Fixed",phase:this.fixedState.currentPhase,timer:(this.fixedState.phaseTimer/1e3).toFixed(1)+"s",active:this.fixedState.isActive}:{mode:"Adaptive",pair:this.adaptiveState.currentPair,phase:this.adaptiveState.currentPhase,timer:(this.adaptiveState.phaseTimer/1e3).toFixed(1)+"s",scores:this.adaptiveState.priorityScores,active:this.adaptiveState.isActive}}}const S={getDistance(h,t,e,i){const a=e-h,n=i-t;return Math.sqrt(a*a+n*n)},getAngle(h,t,e,i){return Math.atan2(i-t,e-h)},getAngleDifference(h,t){let e=t-h;for(;e>Math.PI;)e-=2*Math.PI;for(;e<-Math.PI;)e+=2*Math.PI;return e},normalizeAngle(h){for(;h>Math.PI;)h-=2*Math.PI;for(;h<-Math.PI;)h+=2*Math.PI;return h},lerp(h,t,e){return h+(t-h)*e},clamp(h,t,e){return Math.min(Math.max(h,t),e)},randomBetween(h,t){return Math.random()*(t-h)+h},randomInt(h,t){return Math.floor(Math.random()*(t-h+1))+h},randomFromArray(h){return h[Math.floor(Math.random()*h.length)]},formatTime(h){return(h/1e3).toFixed(1)},hexToRgba(h,t=1){const e=parseInt(h.slice(1,3),16),i=parseInt(h.slice(3,5),16),a=parseInt(h.slice(5,7),16);return`rgba(${e}, ${i}, ${a}, ${t})`},isPointInRect(h,t,e,i,a,n){return h>=e&&h<=e+a&&t>=i&&t<=i+n},smoothStep(h,t,e){const i=this.clamp((e-h)/(t-h),0,1);return i*i*(3-2*i)},getBezierPoint(h,t,e,i,a){const n=3*(e.x-t.x),r=3*(i.x-e.x)-n,o=a.x-t.x-n-r,l=3*(e.y-t.y),c=3*(i.y-e.y)-l,d=a.y-t.y-l-c,u=h*h,g=u*h;return{x:o*g+r*u+n*h+t.x,y:d*g+c*u+l*h+t.y}}};class D{constructor({id:t,direction:e,intersection:i,route:a=null,lane:n=0}){this.id=t,this.fromDirection=e,this.intersection=i,this.route=a||[e,"intersection",this.calculateToDirection()],this.lane=n,this.lateralPosition=0,this.turnType=this.calculateTurnType(),this.toDirection=this.route[2];const r=i.spawnPoints[e];this.x=r.x,this.y=r.y,this.angle=this.getInitialAngle(),this.speed=0,this.maxSpeed=s.DEFAULT_SETTINGS.CAR_SPEED,this.width=s.CAR_WIDTH,this.height=s.CAR_HEIGHT,this.color=s.CAR_COLORS[Math.floor(Math.random()*s.CAR_COLORS.length)],this.state="approaching",this.waitStartTime=null,this.totalWaitTime=0,this.isInIntersection=!1,this.pathProgress=0,this.calculateTargetPosition()}calculateTurnType(){if(!this.route||this.route.length<3)return s.TURN_TYPES.STRAIGHT;const t=this.route[0],e=this.route[2],i=[s.DIRECTIONS.NORTH,s.DIRECTIONS.EAST,s.DIRECTIONS.SOUTH,s.DIRECTIONS.WEST],a=i.indexOf(t),r=(i.indexOf(e)-a+4)%4;return r===1?"right":r===3?"left":s.TURN_TYPES.STRAIGHT}prepareForTurn(){this.turnType==="left"?this.lane=0:this.turnType==="right"&&(this.lane=1)}updateApproaching(t,e){this.prepareForTurn()}updateCrossing(t){this.speed=Math.min(this.maxSpeed*1.2,this.speed+40*t),this.turnType==="left"||this.turnType==="right"?this.followTurnTrajectory(t):(this.x+=Math.cos(this.angle)*this.speed*t,this.y+=Math.sin(this.angle)*this.speed*t),!this.isInIntersection&&this.pathProgress>0&&(this.state="exiting"),this.pathProgress+=t}followTurnTrajectory(t){const e=this.intersection.getPathEntryPoint(this.fromDirection),i=this.intersection.exitPoints[this.toDirection];let a,n;this.turnType==="left"?(a={x:e.x-60,y:e.y+60},n={x:i.x-60,y:i.y-60}):(a={x:e.x+60,y:e.y-60},n={x:i.x+60,y:i.y+60});const r=Math.min(this.pathProgress/1.2,1),o=S.getBezierPoint(r,e,a,n,i);if(this.x=o.x,this.y=o.y,r<1){const l=Math.min(r+.05,1),c=S.getBezierPoint(l,e,a,n,i);this.angle=S.getAngle(this.x,this.y,c.x,c.y)}}calculateToDirection(){const t=[s.DIRECTIONS.NORTH,s.DIRECTIONS.EAST,s.DIRECTIONS.SOUTH,s.DIRECTIONS.WEST],e=t.indexOf(this.fromDirection);return t[(e+2)%4]}getInitialAngle(){switch(this.fromDirection){case s.DIRECTIONS.NORTH:return Math.PI/2;case s.DIRECTIONS.EAST:return Math.PI;case s.DIRECTIONS.SOUTH:return-Math.PI/2;case s.DIRECTIONS.WEST:return 0;default:return 0}}calculateTargetPosition(){if(this.intersection&&typeof this.intersection.getExitPoint=="function"&&this.fromDirection){const t=this.intersection.getExitPoint(this.fromDirection);if(!t||typeof t.x!="number"||typeof t.y!="number"){console.warn("Target position is undefined or invalid for car",this.id);return}this.targetX=t.x,this.targetY=t.y}else console.warn("intersection.getExitPoint is not a function or direction is missing")}update(t,e){const i=t/1e3;switch(this.state){case"approaching":this.updateApproaching(i,e);break;case"waiting":this.updateWaiting(i,e);break;case"crossing":this.updateCrossing(i);break;case"exiting":this.updateExiting(i);break}this.speed>0&&(this.x+=Math.cos(this.angle)*this.speed*i,this.y+=Math.sin(this.angle)*this.speed*i),this.isInIntersection=this.intersection.isInIntersection(this.x,this.y)}updateApproaching(t,e){const i=this.intersection.getStopLinePosition(this.fromDirection),a=this.getDistanceToStopLine(i),n=this.checkForCarAhead(),r=n&&this.getDistanceToCarAhead(n)<35;if((a<=30||r)&&(e[this.fromDirection]===s.LIGHT_STATES.RED||r)){this.state="waiting",this.speed=0,r||(this.waitStartTime=Date.now());return}this.speed=Math.min(this.maxSpeed,this.speed+30*t),this.isInIntersection&&(this.state="crossing")}updateWaiting(t,e){this.speed=0,this.waitStartTime&&(this.totalWaitTime=Date.now()-this.waitStartTime),(e[this.fromDirection]===s.LIGHT_STATES.GREEN||e[this.fromDirection]===s.LIGHT_STATES.YELLOW)&&(this.state="crossing",this.waitStartTime=null)}updateCrossing(t){this.speed=Math.min(this.maxSpeed*1.2,this.speed+40*t),!this.isInIntersection&&this.pathProgress>0&&(this.state="exiting"),this.pathProgress+=t}getTargetExitAngle(){switch(this.toDirection){case s.DIRECTIONS.NORTH:return-Math.PI/2;case s.DIRECTIONS.EAST:return 0;case s.DIRECTIONS.SOUTH:return Math.PI/2;case s.DIRECTIONS.WEST:return Math.PI;default:return this.angle}}updateExiting(t){this.turnType==="left"?this.lane=0:this.turnType==="right"&&(this.lane=1),this.lateralPosition=0,this.route&&this.route.length>1&&(this.route=this.route.slice(1)),this.speed=this.maxSpeed;let e=!1;e=this.x<-50||this.x>s.CANVAS_WIDTH+50||this.y<-50||this.y>s.CANVAS_HEIGHT+50,e&&(this.state="completed")}getDistanceToStopLine(t){switch(this.fromDirection){case s.DIRECTIONS.NORTH:return Math.abs(this.y-t.y1);case s.DIRECTIONS.EAST:return Math.abs(this.x-t.x1);case s.DIRECTIONS.SOUTH:return Math.abs(this.y-t.y1);case s.DIRECTIONS.WEST:return Math.abs(this.x-t.x1);default:return 0}}render(t){t.save(),t.translate(this.x,this.y),t.rotate(this.angle),t.fillStyle=this.color,t.fillRect(-this.width/2,-this.height/2,this.width,this.height),t.fillStyle="#333333",t.fillRect(-this.width/2+2,-this.height/2+2,this.width-4,3),t.fillRect(-this.width/2+2,this.height/2-5,this.width-4,3),t.restore()}isWaiting(){return this.state==="waiting"}isCompleted(){return this.state==="completed"}getWaitTime(){return this.totalWaitTime}getDirection(){return this.fromDirection}checkForCarAhead(){const t=this.intersection.carManager?this.intersection.carManager.getCars():[];let e=null,i=1/0;for(const a of t){if(a.id===this.id||a.fromDirection!==this.fromDirection)continue;let n=!1,r=0;switch(this.fromDirection){case s.DIRECTIONS.NORTH:n=a.y>this.y,r=a.y-this.y;break;case s.DIRECTIONS.EAST:n=a.x<this.x,r=this.x-a.x;break;case s.DIRECTIONS.SOUTH:n=a.y<this.y,r=this.y-a.y;break;case s.DIRECTIONS.WEST:n=a.x>this.x,r=a.x-this.x;break}n&&r>0&&r<i&&(i=r,e=a)}return e}getDistanceToCarAhead(t){if(!t)return 1/0;switch(this.fromDirection){case s.DIRECTIONS.NORTH:return t.y-this.y;case s.DIRECTIONS.EAST:return this.x-t.x;case s.DIRECTIONS.SOUTH:return this.y-t.y;case s.DIRECTIONS.WEST:return t.x-this.x;default:return 1/0}}}class E{constructor(t){this.intersection=t,this.cars=[],this.nextCarId=1,this.spawnTimer=0,this.settings={...s.DEFAULT_SETTINGS},this.onCarCompleted=null,this.intersection.carManager=this}initialize(t){this.settings={...t},this.cars=[],this.nextCarId=1,this.spawnTimer=0}update(t,e){this.spawnTimer+=t;const i=1e4/this.settings.CAR_SPAWN_RATE;this.spawnTimer>=i&&(this.spawnCar(),this.spawnTimer=0),this.cars.forEach(n=>{n.maxSpeed=this.settings.CAR_SPEED,n.update(t,e)}),this.cars.filter(n=>n.isCompleted()).forEach(n=>{this.onCarCompleted&&this.onCarCompleted(n)}),this.cars=this.cars.filter(n=>!n.isCompleted())}spawnCar(){const t=[s.DIRECTIONS.NORTH,s.DIRECTIONS.EAST,s.DIRECTIONS.SOUTH,s.DIRECTIONS.WEST],e=t[Math.floor(Math.random()*t.length)],i=this.intersection.spawnPoints[e];if(!this.cars.some(n=>{const r=S.getDistance(n.x,n.y,i.x,i.y);return n.fromDirection===e&&r<60})){const n=new D({id:this.nextCarId++,direction:e,intersection:this.intersection});this.cars.push(n)}}render(t){this.cars.forEach(e=>e.render(t))}reset(){this.cars=[],this.nextCarId=1,this.spawnTimer=0}updateSettings(t){this.settings={...t}}getCars(){return[...this.cars]}getWaitingCars(t){return this.cars.filter(e=>e.getDirection()===t&&e.isWaiting())}getCurrentCarCount(){return this.cars.length}}class I{constructor(t){this.intersection=t,this.detectorDistance=s.DEFAULT_SETTINGS.DETECTOR_DISTANCE,this.sensorData={},this.carCounts={},this.waitingCars={},this.totalCarsDetected={},this.initializeSensors()}initializeSensors(){Object.values(s.DIRECTIONS).forEach(t=>{this.sensorData[t]={carsWaiting:0,waitTime:0,detectedCars:[],firstCarWaitStart:null,totalCarsDetected:0},this.carCounts[t]=0,this.waitingCars[t]=null,this.totalCarsDetected[t]=0})}initialize(t){this.detectorDistance=t,this.initializeSensors()}update(t,e,i){return Object.values(s.DIRECTIONS).forEach(a=>{this.sensorData[a].carsWaiting=0,this.sensorData[a].waitTime=0,this.sensorData[a].detectedCars=[],this.sensorData[a].firstCarWaitStart=null,this.waitingCars[a]=null}),e&&i&&Object.values(s.DIRECTIONS).forEach(a=>{e[a]!==i[a]&&(this.resetCarCount(a),this.sensorData[a].waitTime=0,this.sensorData[a].carsWaiting=0)}),this.shouldResetCounts&&(this.resetAllCarCounts(),this.shouldResetCounts=!1),t.forEach(a=>{const n=a.getDirection(),r=this.getDetectionZone(n);if(e&&e[n]===s.LIGHT_STATES.RED){const o=this.isCarInDetectionZone(a,r);!a._countedInDetector&&o&&(a._countedInDetector=!0,this.totalCarsDetected[n]++,this.sensorData[n].totalCarsDetected=this.totalCarsDetected[n]),!o&&a._countedInDetector&&(a._countedInDetector=!1),o&&this.sensorData[n].detectedCars.push(a),a.isWaiting()&&o&&(this.sensorData[n].carsWaiting++,(!this.waitingCars[n]||this.isCarCloserToStopLine(a,this.waitingCars[n],n))&&(this.waitingCars[n]=a),this.sensorData[n].firstCarWaitStart||(this.sensorData[n].firstCarWaitStart=Date.now()-a.getWaitTime()))}}),Object.values(s.DIRECTIONS).forEach(a=>{this.waitingCars[a]&&(this.sensorData[a].waitTime=this.waitingCars[a].getWaitTime())}),this.sensorData}isCarCloserToStopLine(t,e,i){const a=this.intersection.getStopLinePosition(i);switch(i){case s.DIRECTIONS.NORTH:return Math.abs(t.y-a.y1)<Math.abs(e.y-a.y1);case s.DIRECTIONS.EAST:return Math.abs(t.x-a.x1)<Math.abs(e.x-a.x1);case s.DIRECTIONS.SOUTH:return Math.abs(t.y-a.y1)<Math.abs(e.y-a.y1);case s.DIRECTIONS.WEST:return Math.abs(t.x-a.x1)<Math.abs(e.x-a.x1);default:return!1}}getDetectionZone(t){const e=this.intersection.getStopLinePosition(t),i=s.ROAD_WIDTH;switch(t){case s.DIRECTIONS.NORTH:return{x1:this.intersection.centerX-i/2,y1:e.y1-this.detectorDistance,x2:this.intersection.centerX+i/2,y2:e.y1};case s.DIRECTIONS.EAST:return{x1:e.x1,y1:this.intersection.centerY-i/2,x2:e.x1+this.detectorDistance,y2:this.intersection.centerY+i/2};case s.DIRECTIONS.SOUTH:return{x1:this.intersection.centerX-i/2,y1:e.y1,x2:this.intersection.centerX+i/2,y2:e.y1+this.detectorDistance};case s.DIRECTIONS.WEST:return{x1:e.x1-this.detectorDistance,y1:this.intersection.centerY-i/2,x2:e.x1,y2:this.intersection.centerY+i/2};default:return{x1:0,y1:0,x2:0,y2:0}}}isCarInDetectionZone(t,e){return t.x>=e.x1&&t.x<=e.x2&&t.y>=e.y1&&t.y<=e.y2}render(t){this.shouldRenderSensors()&&(t.strokeStyle="rgba(255, 165, 0, 0.8)",t.fillStyle="rgba(255, 165, 0, 0.1)",t.lineWidth=2,t.setLineDash([5,5]),Object.values(s.DIRECTIONS).forEach(e=>{const i=this.getDetectionZone(e);t.fillRect(i.x1,i.y1,i.x2-i.x1,i.y2-i.y1),t.strokeRect(i.x1,i.y1,i.x2-i.x1,i.y2-i.y1),this.renderCarCount(t,e,i),this.renderWaitTime(t,e,i)}),t.setLineDash([]))}shouldRenderSensors(){return!0}renderCarCount(t,e,i){const a=this.totalCarsDetected[e]||0;t.fillStyle="rgba(255, 255, 255, 0.95)",t.strokeStyle="#333",t.lineWidth=2,t.font="bold 14px Arial",t.textAlign="center";let n,r;switch(e){case s.DIRECTIONS.NORTH:n=i.x1-40,r=(i.y1+i.y2)/2;break;case s.DIRECTIONS.SOUTH:n=i.x2+40,r=(i.y1+i.y2)/2;break;case s.DIRECTIONS.EAST:n=(i.x1+i.x2)/2,r=i.y1-20;break;case s.DIRECTIONS.WEST:n=(i.x1+i.x2)/2,r=i.y2+30;break}const o=a.toString(),l=t.measureText(o).width,c=Math.max(l+10,30),d=20;t.fillRect(n-c/2,r-d/2,c,d),t.strokeRect(n-c/2,r-d/2,c,d),t.fillStyle="#333",t.fillText(o,n,r+4),t.font="bold 10px Arial",t.fillText(e.charAt(0).toUpperCase(),n,r-15)}renderWaitTime(t,e,i){const a=this.waitingCars[e];if(!a)return;const n=(a.getWaitTime()/1e3).toFixed(1);t.fillStyle="rgba(255, 255, 255, 0.95)",t.strokeStyle="#ff4444",t.lineWidth=2,t.font="bold 12px Arial",t.textAlign="center";let r,o;switch(e){case s.DIRECTIONS.NORTH:r=i.x2+50,o=(i.y1+i.y2)/2;break;case s.DIRECTIONS.SOUTH:r=i.x1-50,o=(i.y1+i.y2)/2;break;case s.DIRECTIONS.EAST:r=(i.x1+i.x2)/2,o=i.y2+50;break;case s.DIRECTIONS.WEST:r=(i.x1+i.x2)/2,o=i.y1-40;break}const l=`${n}s`,c=t.measureText(l).width,d=Math.max(c+8,25),u=18;t.fillRect(r-d/2,o-u/2,d,u),t.strokeRect(r-d/2,o-u/2,d,u),t.fillStyle="#ff4444",t.fillText(l,r,o+3)}updateDetectorDistance(t){this.detectorDistance=t}getSensorData(){return{...this.sensorData}}getCarCounts(){return{...this.carCounts}}getTotalCarsDetected(){return{...this.totalCarsDetected}}resetCarCount(t){this.totalCarsDetected[t]=0}resetAllCarCounts(){Object.values(s.DIRECTIONS).forEach(t=>{this.totalCarsDetected[t]=0}),console.log("Adaptive Mode: Car counts reset for new cycle")}triggerCountReset(){this.shouldResetCounts=!0}reset(){this.initializeSensors()}}class p{constructor(){this.reset()}initialize(){this.reset()}reset(){this.totalCarsPassed=0,this.totalWaitTime=0,this.currentCars=0,this.waitTimes=[]}update(t,e){this.currentCars=t.length}recordCarCompletion(t){this.totalCarsPassed++;const e=t.getWaitTime();e>0&&(this.totalWaitTime+=e,this.waitTimes.push(e))}getStats(){const t=this.waitTimes.length>0?this.waitTimes.reduce((e,i)=>e+i,0)/this.waitTimes.length:0;return{totalCarsPassed:this.totalCarsPassed,averageWaitTime:t/1e3,currentCars:this.currentCars}}}class C{constructor(t,e){this.canvas=t,this.ctx=e,this.intersection=new f(s.CANVAS_WIDTH/2,s.CANVAS_HEIGHT/2),this.mode=s.MODES.FIXED,this.fixedMode={trafficLights:new T,carManager:new E(this.intersection),sensorSystem:new I(this.intersection),statistics:new p,settings:{...s.DEFAULT_SETTINGS}},this.adaptiveMode={trafficLights:new T,carManager:new E(this.intersection),sensorSystem:new I(this.intersection),statistics:new p,settings:{...s.DEFAULT_SETTINGS,YELLOW_DURATION:3e3}}}initialize(){this.intersection.setCarManager(this.fixedMode.carManager),this.fixedMode.trafficLights.initialize(s.MODES.FIXED,this.fixedMode.settings),this.fixedMode.carManager.initialize(this.fixedMode.settings),this.fixedMode.sensorSystem.initialize(this.fixedMode.settings.DETECTOR_DISTANCE),this.fixedMode.statistics.initialize(),this.fixedMode.carManager.onCarCompleted=t=>{this.fixedMode.statistics.recordCarCompletion(t)},this.adaptiveMode.trafficLights.initialize(s.MODES.ADAPTIVE,this.adaptiveMode.settings),this.adaptiveMode.carManager.initialize(this.adaptiveMode.settings),this.adaptiveMode.sensorSystem.initialize(this.adaptiveMode.settings.DETECTOR_DISTANCE),this.adaptiveMode.statistics.initialize(),this.adaptiveMode.carManager.onCarCompleted=t=>{this.adaptiveMode.statistics.recordCarCompletion(t)},console.log("Game engine initialized")}update(t){const e=this.getCurrentModeComponents();this.prevLightStates||(this.prevLightStates=e.trafficLights.getLightStates()),e.trafficLights.update(t,this.mode,e.settings),this.intersection.setCarManager(e.carManager),e.carManager.update(t,e.trafficLights.getLightStates());let i;this.mode===s.MODES.ADAPTIVE?(i=e.sensorSystem.update(e.carManager.getCars(),e.trafficLights.getLightStates(),this.prevLightStates),e.trafficLights.updateAdaptiveLogic(i,t)):i=e.sensorSystem.update(e.carManager.getCars()),this.prevLightStates=e.trafficLights.getLightStates(),e.statistics.update(e.carManager.getCars(),t)}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=this.getCurrentModeComponents();this.intersection.render(this.ctx),this.mode===s.MODES.ADAPTIVE&&t.sensorSystem.render(this.ctx),t.carManager.render(this.ctx),t.trafficLights.render(this.ctx,this.intersection)}reset(){this.fixedMode.carManager.reset(),this.fixedMode.trafficLights.reset(),this.fixedMode.sensorSystem.reset(),this.fixedMode.statistics.reset(),this.adaptiveMode.carManager.reset(),this.adaptiveMode.trafficLights.reset(),this.adaptiveMode.sensorSystem.reset(),this.adaptiveMode.statistics.reset(),console.log("Game reset")}getCurrentModeComponents(){return this.mode===s.MODES.FIXED?this.fixedMode:this.adaptiveMode}updateMode(t){const e=this.mode;this.mode=t,t===s.MODES.ADAPTIVE&&e!==s.MODES.ADAPTIVE&&this.adaptiveMode.sensorSystem.resetAllCarCounts(),console.log(`Mode changed from ${e} to: ${t}`)}updateSetting(t,e,i=null){const n=(i||this.mode)===s.MODES.FIXED?this.fixedMode:this.adaptiveMode;switch(n.settings[t]=e,t){case"CAR_SPAWN_RATE":case"CAR_SPEED":case"TURN_RATE":n.carManager.updateSettings(n.settings);break;case"DETECTOR_DISTANCE":n.sensorSystem.updateDetectorDistance(e);break;case"GREEN_DURATION":case"YELLOW_DURATION":case"RED_DURATION":case"MIN_GREEN_TIME":n.trafficLights.updateSettings(n.settings);break}}updateSettings(t){const e=this.getCurrentModeComponents();e.settings={...e.settings,...t},e.trafficLights.updateSettings(e.settings),e.carManager.updateSettings(e.settings)}getStatistics(){return this.getCurrentModeComponents().statistics.getStats()}getLightStates(){return this.getCurrentModeComponents().trafficLights.getLightStates()}getCurrentMode(){return this.mode}getSettings(){return{...this.getCurrentModeComponents().settings}}getFixedModeSettings(){return{...this.fixedMode.settings}}getAdaptiveModeSettings(){return{...this.adaptiveMode.settings}}getSensorSystem(){return this.getCurrentModeComponents().sensorSystem}setLaneMapping(t,e,i){this.laneMapping=t,this.paths=e,this.getPathIndex=i}assignPathToCar(t){const e=this.getPathIndex(t.dir,t.lane,t.move);e!==null&&this.paths[e]&&(t.path=this.paths[e],t.pathIndex=e,t.pathProgress=0)}updateCarPathFollowing(t,e){if(!t.path||t.pathProgress>=t.path.length)return;const i=t.path[t.pathProgress],a=i.x-t.x,n=i.y-t.y,r=Math.sqrt(a*a+n*n),o=t.speed*e;r<o?(t.x=i.x,t.y=i.y,t.pathProgress++):(t.x+=a/r*o,t.y+=n/r*o)}}class y{constructor(t){this.gameEngine=t,this.elements={},this.isPlaying=!0,this.initializeElements()}initializeElements(){this.elements={modeSelect:document.getElementById("mode-select"),playPauseBtn:document.getElementById("playPauseBtn"),resetBtn:document.getElementById("resetBtn"),fixedControls:document.getElementById("fixed-controls"),greenDuration:document.getElementById("greenDuration"),greenValue:document.getElementById("greenDurationValue"),yellowDuration:document.getElementById("yellowDuration"),yellowValue:document.getElementById("yellowDurationValue"),redDuration:document.getElementById("redDuration"),redValue:document.getElementById("redDurationValue"),adaptiveControls:document.getElementById("adaptive-controls"),detectorDistance:document.getElementById("detectorDistance"),minGreenTime:document.getElementById("minGreenTime"),detectorValue:document.getElementById("detectorValue"),minGreenValue:document.getElementById("minGreenValue"),adaptiveYellowDuration:document.getElementById("adaptiveYellowDuration"),adaptiveYellowValue:document.getElementById("adaptiveYellowValue"),carSpawnRate:document.getElementById("carSpawnRate"),carSpeed:document.getElementById("carSpeed"),spawnValue:document.getElementById("spawnValue"),speedValue:document.getElementById("speedValue"),carsPassedStat:document.getElementById("carsPassedStat"),avgWaitStat:document.getElementById("avgWaitStat"),currentCarsStat:document.getElementById("currentCarsStat"),northCountStat:document.getElementById("northCountStat"),southCountStat:document.getElementById("southCountStat"),eastCountStat:document.getElementById("eastCountStat"),westCountStat:document.getElementById("westCountStat"),northLight:document.getElementById("north-light"),eastLight:document.getElementById("east-light"),southLight:document.getElementById("south-light"),westLight:document.getElementById("west-light")}}initialize(){this.setupEventListeners(),this.updateModeDisplay(),this.startStatsUpdate()}setupEventListeners(){this.elements.modeSelect.addEventListener("change",t=>{this.gameEngine.updateMode(t.target.value),this.updateModeDisplay(),this.updateSliderValues()}),this.elements.playPauseBtn.addEventListener("click",()=>{this.isPlaying=window.trafficSimulator.togglePause(),this.elements.playPauseBtn.textContent=this.isPlaying?"⏸️ Pause":"▶️ Play"}),this.elements.resetBtn.addEventListener("click",()=>{this.gameEngine.reset()}),this.setupSlider("greenDuration","greenValue","GREEN_DURATION",t=>t*1e3),this.setupSlider("yellowDuration","yellowValue","YELLOW_DURATION",t=>t*1e3),this.setupSlider("redDuration","redValue","RED_DURATION",t=>t*1e3),this.setupSlider("detectorDistance","detectorValue","DETECTOR_DISTANCE"),this.setupSlider("minGreenTime","minGreenValue","MIN_GREEN_TIME",t=>t*1e3),this.setupSlider("adaptiveYellowDuration","adaptiveYellowValue","YELLOW_DURATION",t=>t*1e3),this.setupSlider("carSpawnRate","spawnValue","CAR_SPAWN_RATE"),this.setupSlider("carSpeed","speedValue","CAR_SPEED")}setupSlider(t,e,i,a=null){const n=this.elements[t],r=this.elements[e];!n||!r||(n.addEventListener("input",o=>{const l=parseFloat(o.target.value);r.textContent=l;const c=a?a(l):l;i==="YELLOW_DURATION"?t==="adaptiveYellowDuration"?this.gameEngine.updateSetting(i,c,s.MODES.ADAPTIVE):this.gameEngine.updateSetting(i,c,s.MODES.FIXED):this.gameEngine.updateSetting(i,c)}),r.textContent=n.value)}updateSliderValues(){const t=this.gameEngine.getCurrentMode(),e=this.gameEngine.getSettings();t===s.MODES.FIXED?(this.elements.greenDuration.value=e.GREEN_DURATION/1e3,this.elements.greenValue.textContent=e.GREEN_DURATION/1e3,this.elements.yellowDuration.value=e.YELLOW_DURATION/1e3,this.elements.yellowValue.textContent=e.YELLOW_DURATION/1e3,this.elements.redDuration.value=e.RED_DURATION/1e3,this.elements.redValue.textContent=e.RED_DURATION/1e3):(this.elements.detectorDistance.value=e.DETECTOR_DISTANCE,this.elements.detectorValue.textContent=e.DETECTOR_DISTANCE,this.elements.minGreenTime.value=e.MIN_GREEN_TIME/1e3,this.elements.minGreenValue.textContent=e.MIN_GREEN_TIME/1e3,this.elements.adaptiveYellowDuration&&(this.elements.adaptiveYellowDuration.value=e.YELLOW_DURATION/1e3,this.elements.adaptiveYellowValue.textContent=e.YELLOW_DURATION/1e3)),this.elements.carSpawnRate.value=e.CAR_SPAWN_RATE,this.elements.spawnValue.textContent=e.CAR_SPAWN_RATE,this.elements.carSpeed.value=e.CAR_SPEED,this.elements.speedValue.textContent=e.CAR_SPEED}updateModeDisplay(){this.gameEngine.getCurrentMode()===s.MODES.FIXED?(this.elements.fixedControls.style.display="block",this.elements.adaptiveControls.style.display="none"):(this.elements.fixedControls.style.display="none",this.elements.adaptiveControls.style.display="block")}startStatsUpdate(){setInterval(()=>{this.updateStatistics(),this.updateLightStatus()},100)}updateStatistics(){const t=this.gameEngine.getStatistics(),e=this.gameEngine.getSensorSystem().getTotalCarsDetected();this.elements.carsPassedStat.textContent=t.totalCarsPassed,this.elements.avgWaitStat.textContent=t.averageWaitTime.toFixed(1)+"s",this.elements.currentCarsStat.textContent=t.currentCars,this.gameEngine.getCurrentMode()==="adaptive"?(this.elements.northCountStat.textContent=e.north||0,this.elements.southCountStat.textContent=e.south||0,this.elements.eastCountStat.textContent=e.east||0,this.elements.westCountStat.textContent=e.west||0):(this.elements.northCountStat.textContent="-",this.elements.southCountStat.textContent="-",this.elements.eastCountStat.textContent="-",this.elements.westCountStat.textContent="-")}updateLightStatus(){const t=this.gameEngine.getLightStates(),e={[s.DIRECTIONS.NORTH]:this.elements.northLight,[s.DIRECTIONS.EAST]:this.elements.eastLight,[s.DIRECTIONS.SOUTH]:this.elements.southLight,[s.DIRECTIONS.WEST]:this.elements.westLight};Object.entries(t).forEach(([i,a])=>{const n=e[i];n&&(n.classList.remove("red","yellow","green"),n.classList.add(a))})}setMode(t){this.elements.modeSelect.value=t}updateSliderValue(t,e){const i=this.elements[t];i&&(i.value=e,i.dispatchEvent(new Event("input")))}}document.getElementById("greenDuration").min=15;document.getElementById("greenDuration").max=100;document.getElementById("redDuration").min=15;document.getElementById("redDuration").max=100;const m=document.getElementById("greenDuration"),R=document.getElementById("greenDurationValue");m.addEventListener("input",()=>{R.textContent=m.value});class A{constructor(){this.canvas=document.getElementById("gameCanvas"),this.ctx=this.canvas.getContext("2d"),this.gameEngine=new C(this.canvas,this.ctx),this.uiController=new y(this.gameEngine),this.trafficLightController=new T,this.isRunning=!0,this.lastTime=0,this.initializeGame(),this.startGameLoop()}initializeGame(){this.canvas.width=s.CANVAS_WIDTH,this.canvas.height=s.CANVAS_HEIGHT,this.gameEngine.initialize(),this.uiController.initialize(),console.log("Traffic Simulator initialized")}startGameLoop(){const t=e=>{const i=e-this.lastTime;if(this.lastTime=e,this.isRunning){const a={GREEN_DURATION:Number(document.getElementById("greenDuration").value)*1e3,YELLOW_DURATION:Number(document.getElementById("yellowDuration").value)*1e3,RED_DURATION:Number(document.getElementById("redDuration").value)*1e3,CAR_SPAWN_RATE:Number(document.getElementById("carSpawnRate").value),CAR_SPEED:Number(document.getElementById("carSpeed").value),MIN_GREEN_TIME:5e3,DETECTOR_DISTANCE:200};this.gameEngine.updateSettings(a),this.gameEngine.update(i)}this.gameEngine.render(),requestAnimationFrame(t)};requestAnimationFrame(t)}pause(){this.isRunning=!1}resume(){this.isRunning=!0}reset(){this.gameEngine.reset()}togglePause(){return this.isRunning=!this.isRunning,this.isRunning}}document.addEventListener("DOMContentLoaded",()=>{window.trafficSimulator=new A});
